Monad«import«Base», class«Monad«m«a», >>=«->>«m«a», ->«a, m«b»», m«b»»», _return«->>«a, m«a»»»», MonadPlus«m«a, Monad», _m0«->>«Unit, m«a»»», _m+«->>«m«a», m«a», m«a»»»»», instance«Monad«?, >>=«->>«n, fun, match«n, |«?«val», fun«val»», |«_, Null»»»», _return«->>«val, ?«val»»»»», define«>>«->>«m«a, Monad», m«b», m«b»», ->>«m1, m2, m2»», ?>>«->>«->>«Unit, Bool», m«a, Monad, MonadPlus», m«a»», ->>«_pred, m, if«_pred«()», m, _m0«()»»»»», template«mdo«syntax«mlet«'var, " =", 'value, >>=«'value, ->«'var, 'next»»», mreturn«'value, _return«'value»», _«'expr, >>«'expr, 'next»»»», seq«syntax«for«'var, " in", 'value, >>=«'value, ->«'var, 'next»»», where«'cond, ?>>«->>«_, 'cond», 'next»», yield«'value, _return«'value»»»»»»