Prelude«
  type«
    ---«
      "Fundamental Types"», 
    Prop«
      Prop«
        ->«
          Unit, a», 
        ->«
          a, a»
        »
      »
    », 
  define«
    undefined«
      throw«
        "Value is undefined"»
      », 
    -ignore«
      ->>«
        exp, do«
          exp, ()»
        »
      », 
    -prop«
      ->>«
        v, do«
          let«
            val, v», 
          Prop«
            ->«
              _, val», 
            ->«
              a, set«
                val, a»
              »
            »
          »
        »
      », 
    :=«
      ->>«
        pr, a, do«
          let«
            Prop«
              _, s», 
            pr», 
          s«
            a»
          »
        »
      », 
    $«
      ->>«
        pr, do«
          let«
            Prop«
              g, _», 
            pr», 
          g«
            ()»
          »
        »
      », 
    ---«
      "Get the variables type and value as string"», 
    -typeof«
      ->>«
        a, Str», 
      ->>«
        a, asm«
          `typeof `, a»
        »
      », 
    -json«
      ->>«
        a, Str», 
      ->>«
        a, asm«
          `JSON.stringify(`, a, `)`»
        »
      », 
    |+|«
      ->>«
        {«
          .r1», 
        {«
          .r2», 
        {«
          .r3»
        », 
      ->>«
        r1, r2, asm«
          `{ ...`, r1, `, ...`, r2, ` }`»
        »
      », 
    ---«
      "Logical Operations"», 
    !«
      ->>«
        Bool, Bool», 
      ->>«
        a, asm«
          `!`, a»
        »
      », 
    &&«
      ->>«
        Bool, Bool, Bool», 
      ->>«
        a, b, asm«
          a, ` && `, b»
        »
      », 
    ||«
      ->>«
        Bool, Bool, Bool», 
      ->>«
        a, b, asm«
          a, ` || `, b»
        »
      », 
    ---«
      "JavaScript Comparison Operators"», 
    -js-eq«
      ->>«
        a, a, Bool», 
      ->>«
        a, b, asm«
          a, ` === `, b»
        »
      », 
    -js-neq«
      ->>«
        a, a, Bool», 
      ->>«
        a, b, asm«
          a, ` !== `, b»
        »
      », 
    -json-eq«
      ->>«
        a, a, Bool», 
      ->>«
        a, b, -js-eq«
          -json«
            a», 
          -json«
            b»
          »
        »
      », 
    -js-lt«
      ->>«
        Num, Num, Bool», 
      ->>«
        a, b, asm«
          a, ` < `, b»
        »
      », 
    -js-le«
      ->>«
        Num, Num, Bool», 
      ->>«
        a, b, asm«
          a, ` <= `, b»
        »
      », 
    -js-gt«
      ->>«
        Num, Num, Bool», 
      ->>«
        a, b, asm«
          a, ` > `, b»
        »
      », 
    -js-ge«
      ->>«
        Num, Num, Bool», 
      ->>«
        a, b, asm«
          a, ` >= `, b»
        »
      », 
    ---«
      "Mathematical Operations"», 
    +«
      ->>«
        Num, Num, Num», 
      ->>«
        a, b, asm«
          a, ` + `, b»
        »
      », 
    -«
      ->>«
        Num, Num, Num», 
      ->>«
        a, b, asm«
          a, ` - `, b»
        »
      », 
    *«
      ->>«
        Num, Num, Num», 
      ->>«
        a, b, asm«
          a, ` * `, b»
        »
      », 
    /«
      ->>«
        Num, Num, Num», 
      ->>«
        a, b, asm«
          a, ` / `, b»
        »
      », 
    ---«
      "Mutating Math Opererations"», 
    ++«
      ->>«
        var, set«
          var, +«
            var, 1»
          »
        »
      », 
    --«
      ->>«
        var, set«
          var, -«
            var, 1»
          »
        »
      », 
    +=«
      ->>«
        var, num, set«
          var, +«
            var, num»
          »
        »
      », 
    -=«
      ->>«
        var, num, set«
          var, -«
            var, num»
          »
        »
      », 
    *=«
      ->>«
        var, num, set«
          var, *«
            var, num»
          »
        »
      », 
    /=«
      ->>«
        var, num, set«
          var, /«
            var, num»
          »
        »
      »
    », 
  define«
    ---«
      "Console methods"», 
    -log«
      ->>«
        a, Unit», 
      ->>«
        val, asm«
          `console.log(`, val, `)`»
        »
      »
    », 
  class«
    Eq«
      a, ==«
        ->>«
          a, a, Bool»
        », 
      !=«
        ->>«
          a, a, Bool», 
        ->>«
          a1, a2, !«
            ==«
              a1, a2»
            »
          »
        »
      », 
    Ord«
      a«
        Eq», 
      <«
        ->>«
          a, a, Bool»
        », 
      >«
        ->>«
          a, a, Bool»
        », 
      <=«
        ->>«
          a, a, Bool», 
        ->>«
          a1, a2, ||«
            <«
              a1, a2», 
            ==«
              a1, a2»
            »
          »
        », 
      >=«
        ->>«
          a, a, Bool», 
        ->>«
          a1, a2, ||«
            >«
              a1, a2», 
            ==«
              a1, a2»
            »
          »
        »
      »
    », 
  instance«
    Eq«
      Num, ==«
        -js-eq», 
      !=«
        -js-neq»
      », 
    Ord«
      Num, <«
        -js-lt», 
      >«
        -js-gt», 
      <=«
        -js-le», 
      >=«
        -js-ge»
      »
    », 
  instance«
    Eq«
      («
        a«
          Eq»
        », 
      ==«
        ->>«
          a, b, do«
            let«
              («
                a1», 
              a», 
            let«
              («
                a2», 
              b», 
            ==«
              a1, a2»
            »
          »
        »
      », 
    Eq«
      («
        a«
          Eq», 
        b«
          Eq»
        », 
      ==«
        ->>«
          a, b, do«
            let«
              («
                a1, b1», 
              a», 
            let«
              («
                a2, b2», 
              b», 
            &&«
              ==«
                a1, a2», 
              ==«
                b1, b2»
              »
            »
          »
        »
      »
    », 
  define«
    -min«
      ->>«
        a1, a2, if«
          <«
            a1, a2», 
          a1, a2»
        »
      », 
    -max«
      ->>«
        a1, a2, if«
          >«
            a1, a2», 
          a1, a2»
        »
      »
    », 
  type«
    Iter«
      alias«
        ->>«
          a, Unit»
        »
      »
    », 
  class«
    ---«
      "Array type classes"», 
    Indexed«
      a, -length«
        ->>«
          a, Num»
        », 
      @«
        ->>«
          a, Num, b»
        »
      »
    », 
  define«
    ---«
      "Array operations"», 
    -array-length«
      ->>«
        [«
          a», 
        Num», 
      ->>«
        arr, asm«
          arr, `.length`»
        »
      », 
    -array-index«
      ->>«
        [«
          a», 
        Num, a», 
      ->>«
        arr, ind, asm«
          arr, `[`, ind, `]`»
        »
      », 
    -foreach«
      ->>«
        a«
          Indexed», 
        Iter«
          a», 
        Unit», 
      ->>«
        arr, -iter, do«
          let«
            i, 0», 
          while«
            <«
              i, -length«
                arr»
              », 
            do«
              -iter«
                @«
                  arr, i»
                », 
              ++«
                i»
              »
            »
          »
        »
      »
    », 
  instance«
    Indexed«
      [«
        a», 
      -length«
        -array-length», 
      @«
        -array-index»
      »
    », 
  type«
    ---«
      "Iterators"», 
    IteratorResult«
      alias«
        {«
          value«
            a», 
          done«
            Bool»
          »
        »
      », 
    Iterator«
      alias«
        {«
          next«
            ->«
              Unit, IteratorResult«
                a»
              »
            »
          »
        »
      », 
    Iterable«
      alias«
        {«
          Symbol.iterator«
            ->«
              Unit, Iterator«
                a»
              »
            », 
          .a»
        »
      »
    »
  »
