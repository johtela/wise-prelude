Math/Vector«import«Math/Base, Math/Arith, Data/Tuple», type«alias«Vec2, («Number, Number»», alias«Vec3, («Number, Number, Number»»», class«Vector«v«Arith», _unif«->>«Number, v»», _dim«->>«v, Number»», _comp«->>«v, Number, Number»», _lensqr«->>«v, Number»», <.>«->>«v, v, Number»», _norm«->>«v, v»»»», instance«Arith«Vec2, _0«(«0, 0»», _1«(«1, 1»», _-«->>«a, _mapT2«a, _-»»», +«->>«a, b, _zipT2«a, b, +»»», -«->>«a, b, _zipT2«a, b, -»»», *«->>«a, b, _zipT2«a, b, *»»», /«->>«a, b, _zipT2«a, b, /»»», _abs«->>«a, _mapT2«a, _abs»»», _floor«->>«a, _mapT2«a, _floor»»», _ceil«->>«a, _mapT2«a, _ceil»»», _round«->>«a, _mapT2«a, _round»»»», Vector«Vec2, _unif«->>«a, («a, a»»», _dim«->>«_, 2»», _comp«->>«v, i, asm«v, `[`, i, `]`»»», _lensqr«->>«v, _withT2«v, ->>«x, y, +«*«x, x», *«y, y»»»»»», <.>«->>«v1, v2, +«*«_comp«v1, 0», _comp«v2, 0»», *«_comp«v1, 1», _comp«v2, 1»»»»», _norm«->>«v, do«let«(«x, y», v», let«len, :«Math, .sqrt«+«*«x, x», *«y, y»»»»», («/«x, len», /«y, len»»»»»», Arith«Vec3, _0«(«0, 0, 0»», _1«(«1, 1, 1»», _-«->>«a, _mapT3«a, _-»»», +«->>«a, b, _zipT3«a, b, +»»», -«->>«a, b, _zipT3«a, b, -»»», *«->>«a, b, _zipT3«a, b, *»»», /«->>«a, b, _zipT3«a, b, /»»», _abs«->>«a, _mapT3«a, _abs»»», _floor«->>«a, _mapT3«a, _floor»»», _ceil«->>«a, _mapT3«a, _ceil»»», _round«->>«a, _mapT3«a, _round»»»»», define«_veclen«->>«v, :«Math, .sqrt«_lensqr«v»»»»»»»