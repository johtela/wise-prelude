Math/Vector«import«Math/Base, Math/Arith, Data/Tuple», ---«"# Vectors

Arithmetic types can be trivially extended to vectors. Mainly we are concerned with 2 - 4-dimensional vectors that share the same operators.

The Vector class extends the Arith class with following operators:

- `_unif`($x$) returns a vector with all components set to $x$.

- `_dim`($vecv$) returns the number of components $n$ in vector $vecv$.

- `_comp`($vecv, i$) returns $v_i$, the $i$th component of vector $vecv$, where $0 <= i < n$.

- `_lensqr`($vecv$) returns the squared length of $vecv$, which equals to: $$sum_{i=0}^{n-1} v_i^2$$ The length (or magnitude) of the vector $norm{vecv}$ can be calculated by taking the square root of the result.

- $vecv\ tt""<.>""\ vecu$ returns the dot product of two vectors $vecv * vecu$. It's defined as: $$vecv * vecu = sum_{i=0}^{n-1} v_i * u_i$$

- `_norm`($vecv$) returns the normalized vector $hatv$ defined as:
$$hatv = vecv/norm{vecv} = [ v_0/norm{vecv}, ..., v_{n-1}/norm{vecv} ]$$"», class«Vector«v«Arith», _unif«->>«Number, v»», _dim«->>«v, Number»», _comp«->>«v, Number, Number»», _lensqr«->>«v, Number»», <.>«->>«v, v, Number»», _norm«->>«v, v»»»», define«---«"We define length $norm{vecv}$ generically for all vectors using the `_lensqr` method."», _veclen«->>«v, :«Math, .sqrt«_lensqr«v»»»»»», ---«"## 2D and 3D Vector

Vectors are represented by tuples containing 2 or 3 numbers. Higher order macros `_mapT*` and `_zipT*` lift arithmetic operators defined for numbers to work with tuples."», type«alias«Vec2, («Number, Number»», alias«Vec3, («Number, Number, Number»»», instance«Arith«Vec2, _0«(«0, 0»», _1«(«1, 1»», _-«->>«a, _mapT2«a, _-»»», +«->>«a, b, _zipT2«a, b, +»»», -«->>«a, b, _zipT2«a, b, -»»», *«->>«a, b, _zipT2«a, b, *»»», /«->>«a, b, _zipT2«a, b, /»»», _abs«->>«a, _mapT2«a, _abs»»», _floor«->>«a, _mapT2«a, _floor»»», _ceil«->>«a, _mapT2«a, _ceil»»», _round«->>«a, _mapT2«a, _round»»»», Vector«Vec2, _unif«->>«a, («a, a»»», _dim«->>«_, 2»», _comp«->>«v, i, asm«v, `[`, i, `]`»»», _lensqr«->>«v, _mapfoldT2«v, ->>«a, *«a, a»», +»»», <.>«->>«v1, v2, _zipfoldT2«v1, v2, *, +»»», _norm«->>«v, do«let«(«x, y», v», let«len, :«Math, .sqrt«+«*«x, x», *«y, y»»»»», («/«x, len», /«y, len»»»»»», Arith«Vec3, _0«(«0, 0, 0»», _1«(«1, 1, 1»», _-«->>«a, _mapT3«a, _-»»», +«->>«a, b, _zipT3«a, b, +»»», -«->>«a, b, _zipT3«a, b, -»»», *«->>«a, b, _zipT3«a, b, *»»», /«->>«a, b, _zipT3«a, b, /»»», _abs«->>«a, _mapT3«a, _abs»»», _floor«->>«a, _mapT3«a, _floor»»», _ceil«->>«a, _mapT3«a, _ceil»»», _round«->>«a, _mapT3«a, _round»»»», Vector«Vec3, _unif«->>«a, («a, a, a»»», _dim«->>«_, 3»», _comp«->>«v, i, asm«v, `[`, i, `]`»»», _lensqr«->>«v, _mapfoldT3«v, ->>«a, *«a, a»», +»»», <.>«->>«v1, v2, _zipfoldT3«v1, v2, *, +»»», _norm«->>«v, do«let«(«x, y, z», v», let«len, :«Math, .sqrt«+«+«*«x, x», *«y, y»», *«z, z»»»»», («/«x, len», /«y, len», /«z, len»»»»»»»»