Base«type«&«____not_in_use____«a»»», define«undefined«throw«"Value is undefined"»», _ignore«->>«exp, do«exp, ()»»», _id«->>«val, val»», ?has«->>«?«a», Bool», ->>«val, asm«val, ` != null`»»», ?with«->>«?«a», ->>«a, Unit», Unit», ->>«a, _mac, if«?has«a», _mac«asm«a»»»»», ---«"Get the variable's type and value as string"», _typeof«->>«a, Str», ->>«a, asm«`typeof `, a»»», _toString«->>«a, Str», ->>«val, asm«val, `.toString()`»»», _json«->>«a, Str», ->>«a, asm«`JSON.stringify(`, a, `)`»»», |+|«->>«{«.r1», {«.r2», {«.r3»», ->>«r1, r2, asm«`{ ...`, r1, `, ...`, r2, ` }`»»», ^«->>«&«a», a», ->>«ref, asm«ref»»», :=«->>«&«a», a, a», ->>«ref, val, asm«ref, ` = `, val»»»», define«---«"Console output"», _log«->>«a, Unit», ->>«val, asm«`console.log(`, val, `)`»»»», define«---«"Concatenate strings"», #«->>«Str, Str, Str», ->>«s1, s2, asm«s1, `+`, s2»»», _concat«->>«[«Str», Str», ->>«strs, asm«`String.prototype.concat(...`, strs, `)`»»»», class«Show«a, _show«->>«a, Str»»»», instance«Show«Bool, _show«_toString»», Show«Num, _show«_toString»», Show«Str, _show«_id»»»»