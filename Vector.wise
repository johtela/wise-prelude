Vector«import«Math, Tuple», type«Vec2«alias«(«Num, Num»»», Vec3«alias«(«Num, Num, Num»»»», class«Vector«v«Arith», _unif«->>«Num, v»», _dim«->>«v, Num»», _comp«->>«v, Num, Num»», _lensqr«->>«v, Num»», <.>«->>«v, v, Num»», _norm«->>«v, v»»»», instance«Arith«Vec2, _0«->>«_, («0, 0»»», _1«->>«_, («1, 1»»», _-«->>«a, _mapT2«a, _-»»», +«->>«a, b, _zipT2«a, b, +»»», -«->>«a, b, _zipT2«a, b, -»»», *«->>«a, b, _zipT2«a, b, *»»», /«->>«a, b, _zipT2«a, b, /»»», _abs«->>«a, _mapT2«a, _abs»»», _floor«->>«a, _mapT2«a, _floor»»», _ceil«->>«a, _mapT2«a, _ceil»»», _round«->>«a, _mapT2«a, _round»»», _fract«->>«a, _mapT2«a, _fract»»»», Vector«Vec2, _unif«->>«a, («a, a»»», _dim«->>«_, 2»», _comp«->>«v, i, asm«v, `[`, i, `]`»»», _lensqr«->>«v, _withT2«v, ->>«x, y, +«*«x, x», *«y, y»»»»»», <.>«->>«v1, v2, +«*«_comp«v1, 0», _comp«v2, 0»», *«_comp«v1, 1», _comp«v2, 1»»»»», _norm«->>«v, do«let«(«x, y», v», let«len, _sqrt«+«*«x, x», *«y, y»»»», («/«x, len», /«y, len»»»»»», Arith«Vec3, _0«->>«_, («0, 0, 0»»», _1«->>«_, («1, 1, 1»»», _-«->>«a, _mapT3«a, _-»»», +«->>«a, b, _zipT3«a, b, +»»», -«->>«a, b, _zipT3«a, b, -»»», *«->>«a, b, _zipT3«a, b, *»»», /«->>«a, b, _zipT3«a, b, /»»», _abs«->>«a, _mapT3«a, _abs»»», _floor«->>«a, _mapT3«a, _floor»»», _ceil«->>«a, _mapT3«a, _ceil»»», _round«->>«a, _mapT3«a, _round»»», _fract«->>«a, _mapT3«a, _fract»»»»», define«_veclen«->>«v, _sqrt«_lensqr«v»»»»»»