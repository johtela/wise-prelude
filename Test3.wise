Test3«
  import«
    Prelude», 
  type«
    :[«
      |«
        Nil, ::«
          a, :[«
            a»
          »
        »
      », 
    NumList«
      alias«
        :[«
          Num»
        »
      », 
    Foo«
      alias«
        {«
          foo«
            Num», 
          bar«
            Bool», 
          .tail»
        »
      », 
    Point«
      Pt«
        Num, Num»
      »
    », 
  define«
    foo«
      Foo«
        |«
          name«
            Str»
          »
        », 
      {«
        foo«
          1», 
        bar«
          false», 
        name«
          "foo"»
        »
      », 
    getName«
      fun«
        rec, .«
          rec, name»
        »
      », 
    testFoo«
      -[«
        "foo", "bar", "as"»
      », 
    sum«
      fun«
        list, match«
          list, |«
            Nil, 0», 
          |«
            ::«
              n, rest», 
            *«
              n, sum«
                rest»
              »
            »
          »
        »
      », 
    'max«
      mac«
        a, b, if«
          >«
            a, b», 
          a, b»
        »
      », 
    'byVal«
      mac«
        a, b, 'mac, do«
          let«
            a', a», 
          let«
            b', b», 
          'mac«
            a', b'»
          »
        »
      », 
    maxByVal«
      fun«
        a, b, 'byVal«
          a, b, 'max»
        »
      », 
    --«
      mac«
        var, set«
          var, -«
            var, 1»
          »
        »
      », 
    *=«
      mac«
        var, num, set«
          var, *«
            var, num»
          »
        »
      », 
    gen«
      fun«
        a, -[«
          b, c, ...«
            d»
          », 
        a«
          b, c, d»
        »
      », 
    min«
      fun«
        a, b, if«
          <«
            a, b», 
          a, b»
        »
      », 
    swap«
      fun«
        Pt«
          a, b», 
        Pt«
          b, a»
        »
      », 
    factorial«
      ->«
        Num, Num», 
      fun«
        n, do«
          let«
            [«
              res», 
            [«
              n»
            », 
          while«
            >«
              --«
                n», 
              0», 
            *=«
              res, n», 
            res»
          »
        »
      »
    »
  »
