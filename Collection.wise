Collection«import«Base, Comparison, Math«Arith, +, ++», Monad», class«Indexed«i«a», @length«->>«i«a», Num»», @«->>«i«a», Num, a»»», MutableIndexed«m«a, Indexed», @new«->>«Num, m«a»»», @resize«->>«m«a», Num, Unit»», @set«->>«m«a», Num, a, Unit»»», Mappable«m«a», _map«->>«m«a», ->«a, b», m«b»»»», Filterable«f«a», _filter«->>«f«a», ->«a, Bool», f«a»»»», Foldable«f«a», _fold«->>«f«a», b, ->«b, a, b», b»»», Range«a, ..«->>«a, a, m«a, MonadPlus»»»»», define«---«"Operations on Indexed types"», @foreach«->>«i«a, Indexed», ->>«a, Num, Unit», Unit», ->>«arr, _iter, do«set«i, -1», let«a, arr», while«<«++«i», @length«a»», _iter«@«a, ^«i»», ^«i»»»»»», @fold«->>«i«a, Indexed», b, ->>«b, a, b», b», ->>«arr, initial, _folder, do«set«res, initial», @foreach«arr, ->>«a, _, _ignore«:=«res, _folder«^«res», a»»»»», ^«res»»»», ---«"Operations on MutableIndexed types"», @map«->>«a«b, Indexed, MutableIndexed», ->>«b, c», a«c»», ->>«indexed, _mapper, do«let«arr, indexed», let«res, @new«@length«arr»»», @foreach«arr, ->>«a, i, @set«res, i, _mapper«a»»»», res»»», @map?«->>«a«b, Indexed, MutableIndexed», ->>«b, ?«c»», a«c»», ->>«indexed, _mapper, do«let«arr, indexed», let«res, @new«@length«arr»»», set«i, -1», @foreach«arr, ->>«a, _, ?with«_mapper«a», ->>«b, @set«res, ++«i», b»»»»», @resize«res, +«^«i», 1»», res»»»», define«---«"Operations for mappable and foldable types"», _foreach«->>«coll, _iter, _fold«coll, (), ->«_, a, _iter«a»»»»»»»