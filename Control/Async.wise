Control/Async«import«Lang/Base, Control/Monad, Data/Iterator», type«object«Promise«a», then«->«->«a, Promise«b»», Promise«b»»», catch«->«->«e, Promise«a»», Promise«a»»», finally«->«->«Unit, Unit», Promise«a»»», all«->«Iterable«Promise«a»», Promise«a»», static», allSettled«->«Iterable«Promise«a»», Promise«a»», static», any«->«Iterable«Promise«a»», Promise«a»», static», race«->«Iterable«Promise«a»», Promise«a»», static», reject«->«e, Promise«a»», static», resolve«->«a, Promise«a»», static»»», define«_promise«->>«->«->«a, Unit», Unit», Promise«a»», ->>«executor, asm«`new Promise(`, executor, `)`»»»», instance«Monad«Promise, >>=«Promise:«.then»», _return«Promise:«.resolve»»», MonadFail«Promise, _fail«Promise:«.reject»»», MonadError«Promise, _throw«Promise:«.reject»», _catch«Promise:«.catch»», _finally«Promise:«.finally»»»», template«async«syntax«await«'var, " =", 'value, >>=«'value, ->«'var, 'next»»», areturn«'value, _return«'value»», athrow«'error, _throw«'error»», acatch«'error, " |->", 'value, _catch«->«'error, _return«'value»»»», afinally«'expr, _finally«->«_, 'expr»»», _«'expr, >>«'expr, 'next»»»»»»