Control/Monad«class«Monad«m«a», >>=«->>«m«a», ->«a, m«b»», m«b»»», _return«->>«a, m«a»»»», MonadPlus«m«a, Monad», _m0«m«a»», _m+«->>«m«a», m«a», m«a»»»», MonadFail«m«a, Monad», _fail«->>«e, m«a»»»»», instance«Monad«?, >>=«->>«n, fun, match«n, |«?«val», fun«val»», |«_, Null»»»», _return«->>«val, ?«val»»»»», template«mdo«syntax«mlet«'var, " =", 'value, >>=«'value, ->«'var, 'next»»», mreturn«'value, _return«'value»», _«'expr, >>«'expr, 'next»»»», seq«syntax«for«'var, "* in*", 'value, >>=«'value, ->«'var, 'next»»», where«'cond, ?>>«'cond, 'next»», yield«'value, _return«'value»»»»», define«>>«->>«m«a, Monad», m«b», m«b»», ->>«m1, m2, m2»», ?>>«->>«Bool, m«a, Monad, MonadPlus», m«a»», ->>«pred, m, if«pred, m, _m0»»», _liftFM«->>«->«a, b», ->«m«a, Monad», m«b»»», ->>«fun, ->«m, mdo«mlet«a, m», mreturn«fun«a»»»»»», _liftMM«->>«->>«a, b», ->«m«a, Monad», m«b»»», ->>«_mac, ->«m, mdo«mlet«a, m», mreturn«_mac«a»»»»»», _liftFM2«->>«->«a, b, c», ->«m«a, Monad», m«b», m«c»»», ->>«fun, ->«ma, mb, mdo«mlet«a, ma», mlet«b, mb», mreturn«fun«a, b»»»»»», _liftMM2«->>«->>«a, b, c», ->«m«a, Monad», m«b», m«c»»», ->>«_mac, ->«ma, mb, mdo«mlet«a, ma», mlet«b, mb», mreturn«_mac«a, b»»»»»», _liftFM3«->>«->«a, b, c, d», ->«m«a, Monad», m«b», m«c», m«d»»», ->>«fun, ->«ma, mb, mc, mdo«mlet«a, ma», mlet«b, mb», mlet«c, mc», mreturn«fun«a, b, c»»»»»», _liftMM3«->>«->>«a, b, c, d», ->«m«a, Monad», m«b», m«c», m«d»»», ->>«_mac, ->«ma, mb, mc, mdo«mlet«a, ma», mlet«b, mb», mlet«c, mc», mreturn«_mac«a, b, c»»»»»», _liftFM4«->>«->«a, b, c, d, e», ->«m«a, Monad», m«b», m«c», m«d», m«e»»», ->>«fun, ->«ma, mb, mc, md, mdo«mlet«a, ma», mlet«b, mb», mlet«c, mc», mlet«d, md», mreturn«fun«a, b, c, d»»»»»», _liftMM4«->>«->>«a, b, c, d, e», ->«m«a, Monad», m«b», m«c», m«d», m«e»»», ->>«_mac, ->«ma, mb, mc, md, mdo«mlet«a, ma», mlet«b, mb», mlet«c, mc», mlet«d, md», mreturn«_mac«a, b, c, d»»»»»»»»