Lang/Comparison«import«Lang/Base, Lang/String», define«---«"Logical Operations"», !«->>«Bool, Bool», ->>«a, asm«`!`, a»»», &&«->>«Bool, Bool, Bool», ->>«a, b, asm«a, ` && `, b»»», ||«->>«Bool, Bool, Bool», ->>«a, b, asm«a, ` || `, b»»», ---«"JavaScript Comparison Operators"», _js_eq«->>«a, a, Bool», ->>«a, b, asm«a, ` === `, b»»», _js_neq«->>«a, a, Bool», ->>«a, b, asm«a, ` !== `, b»»», _json_eq«->>«a, a, Bool», ->>«a, b, _js_eq«_json«a», _json«b»»»», _js_lt«->>«Num, Num, Bool», ->>«a, b, asm«a, ` < `, b»»», _js_le«->>«Num, Num, Bool», ->>«a, b, asm«a, ` <= `, b»»», _js_gt«->>«Num, Num, Bool», ->>«a, b, asm«a, ` > `, b»»», _js_ge«->>«Num, Num, Bool», ->>«a, b, asm«a, ` >= `, b»»»», class«---«"Type class for equality comparison"», Eq«a, ==«->>«a, a, Bool»», !=«->>«a, a, Bool», ->>«a1, a2, !«==«a1, a2»»»»», ---«"Type class for order comparison"», Ord«a«Eq», <«->>«a, a, Bool»», >«->>«a, a, Bool»», <=«->>«a, a, Bool», ->>«a1, a2, ||«<«a1, a2», ==«a1, a2»»»», >=«->>«a, a, Bool», ->>«a1, a2, ||«>«a1, a2», ==«a1, a2»»»»»», instance«Eq«Bool, ==«_js_eq», !=«_js_neq»», Eq«Num, ==«_js_eq», !=«_js_neq»», Eq«Str, ==«_js_eq», !=«_js_neq»», Eq«&«a«Eq»», ==«->>«a, b, ==«^«a», ^«b»»»», !=«->>«a, b, !=«^«a», ^«b»»»»», Ord«Num, <«_js_lt», >«_js_gt», <=«_js_le», >=«_js_ge»», Ord«&«a«Eq, Ord»», <«->>«a, b, <«^«a», ^«b»»»», >«->>«a, b, >«^«a», ^«b»»»», <=«->>«a, b, <=«^«a», ^«b»»»», >=«->>«a, b, >=«^«a», ^«b»»»»»»»