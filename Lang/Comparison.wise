Lang/Comparison«import«Lang/String»¸ ---«"# ⚖️ Comparison and Logical Operators

Basic comparison and logical operators are defined here. Typically these are built into a programming language core¸ but in Wise they are macros and typeclass methods."»¸ define«---«"## Logical Operators


Basic logical operators  _not_ `!`¸ _and_ `&&`¸ _or_ `||` translate to the corresponding JS operators.  "»¸ !«->>«Bool¸ Bool»¸ ->>«a¸ asm«`!`¸ a»»»¸ &&«->>«Bool¸ Bool¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` && `¸ b»»»¸ ||«->>«Bool¸ Bool¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` || `¸ b»»»¸ ---«"## JS Comparison Operators

Wrappers for JS comparison operators make implementing typeclasses that follow easier."»¸ ===«->>«a¸ a¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` === `¸ b»»»¸ !==«->>«a¸ a¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` !== `¸ b»»»¸ _json_eq«->>«a¸ a¸ Bool»¸ ->>«a¸ b¸ ===«.json«a»¸ .json«b»»»»¸ _js_lt«->>«Number¸ Number¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` < `¸ b»»»¸ _js_le«->>«Number¸ Number¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` <= `¸ b»»»¸ _js_gt«->>«Number¸ Number¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` > `¸ b»»»¸ _js_ge«->>«Number¸ Number¸ Bool»¸ ->>«a¸ b¸ asm«a¸ ` >= `¸ b»»»»¸ class«---«"## Eq Class


Typeclass Eq is implemented by types that allow comparing their values for equality. The inequality operator `!=` has a default implementation. For performance reasons¸ it's recommended to explicitly implement it when possible."»¸ Eq«a¸ ==«->>«a¸ a¸ Bool»»¸ !=«->>«a¸ a¸ Bool»¸ ->>«a1¸ a2¸ !«==«a1¸ a2»»»»»¸ ---«"## Ord Class

To order its values a type must provide instance of Ord class. An ordered type must also define equality. The equality is used when strict ordering is not required. Although default definitions for `<=` and `>=` exist¸ its better to implement them explicitly when possible."»¸ Ord«a«Eq»¸ <«->>«a¸ a¸ Bool»»¸ >«->>«a¸ a¸ Bool»»¸ <=«->>«a¸ a¸ Bool»¸ ->>«a1¸ a2¸ ||«<«a1¸ a2»¸ ==«a1¸ a2»»»»¸ >=«->>«a¸ a¸ Bool»¸ ->>«a1¸ a2¸ ||«>«a1¸ a2»¸ ==«a1¸ a2»»»»»»¸ instance«---«"## Instances for Eq Class

We provide definition for equality for primitive types. The strict JS equality `===` is used for Bool¸ Number¸ and String types. In Wise¸ you can only compare values of a same type¸ so no coercion will happen anyway."»¸ Eq«Bool¸ ==«===»¸ !=«!==»»¸ Eq«Number¸ ==«===»¸ !=«!==»»¸ Eq«String¸ ==«===»¸ !=«!==»»¸ ---«"Mutable types need to be derefenced before comparing their values. To avoid this¸ we provide an instance that does that automatically."»¸ Eq«&«a«Eq»»¸ ==«->>«a¸ b¸ ==«^«a»¸ ^«b»»»»¸ !=«->>«a¸ b¸ !=«^«a»¸ ^«b»»»»»¸ ---«"## Instances for Ord Class

We define ordering for numbers using the JS operators. Mutable types can be ordered if their argument type can."»¸ Ord«Number¸ <«_js_lt»¸ >«_js_gt»¸ <=«_js_le»¸ >=«_js_ge»»¸ Ord«&«a«Eq¸ Ord»»¸ <«->>«a¸ b¸ <«^«a»¸ ^«b»»»»¸ >«->>«a¸ b¸ >«^«a»¸ ^«b»»»»¸ <=«->>«a¸ b¸ <=«^«a»¸ ^«b»»»»¸ >=«->>«a¸ b¸ >=«^«a»¸ ^«b»»»»»»¸ template«---«"## Logical Syntactic Macros


For convenience we provide few syntactic macros that make writing complex logical expressions easier."»¸ all«syntax«_«'expr¸ "¸"¸ &&«'expr¸ 'next»»¸ $«'expr¸ "."¸ 'expr»»»»»