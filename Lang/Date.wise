Lang/DateÂ«importÂ«Lang/StringÂ», ---Â«"# ðŸ“… Date Type

JavaScriptÂ DateÂ objects represent a single moment in time in a platform-independent format.Â DateÂ objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (theÂ epoch)."Â», typeÂ«---Â«"## The epoch, timestamps, and invalid date

A JavaScript date is fundamentally specified as the time in milliseconds that has elapsed since theÂ epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC (equivalent to theÂ UNIX epoch). This timestamp isÂ timezone-agnosticÂ and uniquely defines an instant in history.

> **Note**:Â While the time value at the heart of a Date object is UTC, the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.

The maximum timestamp representable by aÂ DateÂ object is slightly smaller than the maximum safe integer (`Number.MAX_SAFE_INTEGER`, which is 9,007,199,254,740,991). AÂ DateÂ object can represent a maximum of Â±8,640,000,000,000,000 milliseconds, or Â±100,000,000 (one hundred million) days, relative to the epoch. This is the range from April 20, 271821 BC to September 13, 275760 AD. Any attempt to represent a time outside this range results in theÂ DateÂ object holding a timestamp value ofÂ NaN, which is an ""Invalid Date""."Â», aliasÂ«Timestamp, NumberÂ», objectÂ«Date, nowÂ«Timestamp, staticÂ», parseÂ«->Â«String, TimestampÂ», staticÂ», UTCÂ«->Â«Number, ?Â«NumberÂ», ?Â«NumberÂ», ?Â«NumberÂ», ?Â«NumberÂ», ?Â«NumberÂ», ?Â«NumberÂ», TimestampÂ», staticÂ», getDateÂ«NumberÂ», getDayÂ«NumberÂ», getFullYearÂ«NumberÂ», getHoursÂ«NumberÂ», getMillisecondsÂ«NumberÂ», getMinutesÂ«NumberÂ», getMonthÂ«NumberÂ», getSecondsÂ«NumberÂ», getTimeÂ«NumberÂ», getTimezoneOffsetÂ«NumberÂ», getUTCDateÂ«NumberÂ», getUTCDayÂ«NumberÂ», getUTCFullYearÂ«NumberÂ», getUTCHoursÂ«NumberÂ», getUTCMillisecondsÂ«NumberÂ», getUTCMillinutesÂ«NumberÂ», getUTCMonthÂ«NumberÂ», getUTCSecondsÂ«NumberÂ», setDateÂ«->Â«Number, TimestampÂ»Â», setFullYearÂ«->Â«Number, TimestampÂ»Â», setHoursÂ«->Â«Number, TimestampÂ»Â», setMillisecondsÂ«->Â«Number, TimestampÂ»Â», setMinutesÂ«->Â«Number, TimestampÂ»Â», setMonthÂ«->Â«Number, TimestampÂ»Â», setSecondsÂ«->Â«Number, TimestampÂ»Â», setTimeÂ«->Â«Timestamp, TimestampÂ»Â», setUTCDateÂ«->Â«Number, TimestampÂ»Â», setUTCFullYearÂ«->Â«Number, TimestampÂ»Â», setUTCHoursÂ«->Â«Number, TimestampÂ»Â», setUTCMillisecondsÂ«->Â«Number, TimestampÂ»Â», setUTCMinutesÂ«->Â«Number, TimestampÂ»Â», setUTCMonthÂ«->Â«Number, TimestampÂ»Â», setUTCSecondsÂ«->Â«Number, TimestampÂ»Â», toDateStringÂ«StringÂ», toISOStringÂ«StringÂ», toJSONÂ«StringÂ», toLocaleDateStringÂ«->Â«String, StringÂ»Â», toLocaleStringÂ«->Â«String, StringÂ»Â», toLocaleTimeStringÂ«->Â«String, StringÂ»Â», toStringÂ«StringÂ», toTimeStringÂ«StringÂ», toUTCStringÂ«StringÂ», valueOfÂ«TimestampÂ»Â»Â», defineÂ«_dateFromTimestampÂ«->>Â«Timestamp, DateÂ», ->>Â«ts, asmÂ«`new Date(`, ts, `)`Â»Â»Â», _dateFromStringÂ«->>Â«String, DateÂ», ->>Â«ts, asmÂ«`new Date(`, ts, `)`Â»Â»Â», _dateFromYMDÂ«->>Â«Number, Number, Number, DateÂ», ->>Â«y, "-", m, "-", d, asmÂ«`new Date(`, y, `,`, m, `,`, d, `)`Â»Â»Â», _dateFromYMDHMSÂ«->>Â«Number, Number, Number, Number, Number, Number, DateÂ», ->>Â«y, "-", m, "-", d, "T", h, ":", min, ":", s, asmÂ«`new Date(`, y, `,`, m, `,`, d, `,`, h, `,`, min, `,`, s, `)`Â»Â»Â»Â»Â»