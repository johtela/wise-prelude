Lang/Base«type«alias«Lazy«a», ->«Unit, a»»», define«_undefined«asm«`undefined`»»», define«---«"Elementary macros"», _ignore«->>«exp, do«exp, ()»»», _id«->>«val, val»», ^«->>«&«a», a», ->>«mut, asm«mut»»», :=«->>«&«a», a, a», ->>«mut, val, asm«mut, ` = `, val»»»», define«---«"Operations for nullable values"», ?has«->>«?«a», Bool», ->>«val, asm«val, ` != null`»»», ?with«->>«?«a», ->>«a, Unit», Unit», ->>«a, _mac, if«?has«a», _mac«asm«a»»»»»», define«---«"Lazy macros"», \«->>«a, Lazy«a»», ->>«expr, ->«_, expr»»», \!«->>«Lazy«a», a», ->>«lazy, «lazy, ()»»», _memoize«->>«Lazy«a», Lazy«a»», ->>«lazy, do«set«memo, Null», ->«_, match«^«memo», |«?«v», v», |«_, do«let«val, \!«lazy»», :=«memo, ?«val»», val»»»»»»», \_«->>«expr, _memoize«\«expr»»»»», define«---«"Convert macros to functions"», _tofun«->>«->>«a, b», ->«a, b»», ->>«_mac, ->«a, _mac«a»»»», _tofun2«->>«->>«a, b, c», ->«a, b, c»», ->>«_mac, ->«a, b, _mac«a, b»»»», _tofun3«->>«->>«a, b, c, d», ->«a, b, c, d»», ->>«_mac, ->«a, b, c, _mac«a, b, c»»»», _tofun4«->>«->>«a, b, c, d, e», ->«a, b, c, d, e»», ->>«_mac, ->«a, b, c, d, _mac«a, b, c, d»»»»», define«---«"Currying functions"», #2«->>«fun, ->«a, ->«b, fun«a, b»»»»», #3«->>«fun, ->«a, ->«b, ->«c, fun«a, b, c»»»»»», #4«->>«fun, ->«a, ->«b, ->«c, ->«d, fun«a, b, c, d»»»»»»», ---«"Chaining functions"», >->«->>«f1, f2, ->«a, f2«f1«a»»»»»», define«---«"Console output"», _log«->>«a, Unit», ->>«val, asm«`console.log(`, val, `)`»»»»»