Lang/StringÂ«importÂ«Lang/Base, Lang/NumberÂ», ---Â«"# ğŸ§µ Strings

Strings in Wise are objects derived from JS string type. All the properties and methods available in JS are defined below."Â», typeÂ«objectÂ«String, atÂ«->Â«Number, StringÂ»Â», charAtÂ«->Â«Number, StringÂ»Â», charCodeAtÂ«->Â«Number, NumberÂ»Â», codePointAtÂ«->Â«Number, NumberÂ»Â», concatÂ«->Â«...Â«StringÂ», StringÂ»Â», endsWithÂ«->Â«String, BoolÂ»Â», fromCharCodeÂ«->Â«...Â«NumberÂ», StringÂ», staticÂ», fromCodePointÂ«->Â«...Â«NumberÂ», StringÂ», staticÂ», includesÂ«->Â«String, BoolÂ»Â», indexOfÂ«->Â«String, NumberÂ»Â», isWellFormedÂ«BoolÂ», lastIndexOfÂ«->Â«String, NumberÂ»Â», lengthÂ«NumberÂ», localeCompareÂ«->Â«String, NumberÂ»Â», padEndÂ«->Â«Number, String, StringÂ»Â», padStartÂ«->Â«Number, String, StringÂ»Â», repeatÂ«->Â«Number, StringÂ»Â», sliceÂ«->Â«Number, Number, StringÂ»Â», splitÂ«->Â«String, [Â«StringÂ»Â»Â», startsWithÂ«->Â«String, BoolÂ»Â», substringÂ«->Â«Number, Number, StringÂ»Â», toLocaleLowerCaseÂ«->Â«String, StringÂ»Â», toLocaleUpperCaseÂ«->Â«String, StringÂ»Â», toLowerCaseÂ«StringÂ», toUpperCaseÂ«StringÂ», toWellFormedÂ«StringÂ», trimÂ«StringÂ», trimEndÂ«StringÂ», trimStartÂ«StringÂ»Â», ---Â«"We extend the `Number` object after `String` type is defined. Wise does not allow mutually dependent object definitions, but you can add new properties to an existing object"Â», objectÂ«Number, parseFloatÂ«->Â«String, NumberÂ», staticÂ», parseIntÂ«->Â«String, NumberÂ», staticÂ», toExponentialÂ«->Â«Number, StringÂ»Â», toFixedÂ«->Â«Number, StringÂ»Â», toLocaleStringÂ«->Â«String, StringÂ»Â», toPrecisionÂ«->Â«Number, StringÂ»Â», toStringÂ«->Â«Number, StringÂ»Â»Â»Â», defineÂ«---Â«"## String Concatenation

For convenience, we define some additional macros for string manipulation. `##` operator concatenates two strings and `_concat` does the same for arbitrary number of strings in an array."Â», ##Â«->>Â«String, String, StringÂ», ->>Â«s1, s2, asmÂ«s1, `+`, s2Â»Â»Â», _concatÂ«->>Â«[Â«StringÂ», StringÂ», ->>Â«strs, asmÂ«`String.prototype.concat(...`, strs, `)`Â»Â»Â», ---Â«"## JS Interop

JS types and values all have a string reprsentation. The `_typeof` macro returns the intrinsic JS type as string. `_toString` is a wrapper for the method with the same name. Finally, `_json` serializes any value to JSON format."Â», _typeofÂ«->>Â«a, StringÂ», ->>Â«a, asmÂ«`typeof `, aÂ»Â»Â», _toStringÂ«->>Â«a, StringÂ», ->>Â«val, asmÂ«val, `.toString()`Â»Â»Â», _jsonÂ«->>Â«a, StringÂ», ->>Â«a, asmÂ«`JSON.stringify(`, a, `)`Â»Â»Â»Â», ---Â«"## Show Class

Show typeclass enables a type to define how it's represented as string. The `_show` method can be implemented differently for each type."Â», classÂ«ShowÂ«a, _showÂ«->>Â«a, StringÂ»Â»Â»Â», instanceÂ«---Â«"We define an instance of Show for all primitive types."Â», ShowÂ«Bool, _showÂ«_toStringÂ»Â», ShowÂ«Number, _showÂ«_toStringÂ»Â», ShowÂ«String, _showÂ«_idÂ»Â»Â»Â»