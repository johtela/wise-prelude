Lang/String«import«Lang/Base», type«object«String, at«->«Num, String»», charAt«->«Num, String»», charCodeAt«->«Num, Num»», codePointAt«->«Num, Num»», concat«->«String, String»», endsWith«->«String, Bool»», fromCharCode«->«Num, String», static», fromCodePoint«->«Num, String», static», includes«->«String, Bool»», indexOf«->«String, Num»», isWellFormed«Bool», lastIndexOf«->«String, Num»», localeCompare«->«String, Num»», padEnd«->«Num, String, String»», padStart«->«Num, String, String»», repeat«->«Num, String»», replace«->«String, String, String»», replaceAll«->«String, String, String»», slice«->«Num, Num, String»», split«->«String, [«String»»», startsWith«->«String, Bool»», substring«->«Num, Num, String»», toLocaleLowerCase«->«String, String»», toLocaleUpperCase«->«String, String»», toLowerCase«String», toUpperCase«String», toWellFormed«String», trim«String», trimEnd«String», trimStart«String»»», define«---«"Concatenate strings"», #«->>«String, String, String», ->>«s1, s2, asm«s1, `+`, s2»»», _concat«->>«[«String», String», ->>«strs, asm«`String.prototype.concat(...`, strs, `)`»»», ---«"Get the variable's type and value as string"», _typeof«->>«a, String», ->>«a, asm«`typeof `, a»»», _toString«->>«a, String», ->>«val, asm«val, `.toString()`»»», _json«->>«a, String», ->>«a, asm«`JSON.stringify(`, a, `)`»»»», class«Show«a, _show«->>«a, String»»»», instance«Show«Bool, _show«_toString»», Show«Num, _show«_toString»», Show«String, _show«_id»»»»