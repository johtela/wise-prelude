Data/List«import«Lang/Base, Lang/Comparison, Math/Arith«+», Data/Collection, Control/Monad», type«[:«|«Nil, ::«a, Lazy«[:«a»»»»»», define«nil«\«Nil»», _toList«->>«val, ::«val, nil»»», concatLists«->«list1, list2, match«list1, |«::«first, rest», ::«first, \«concatLists«\!«rest», list2»»»», |«_, list2»»»», mapList«->«list, mapper, match«list, |«::«first, rest», ::«mapper«first», \«mapList«\!«rest», mapper»»»», |«_, Nil»»»», filterList«->«list, filter, match«list, |«::«first, rest», if«filter«first», ::«first, \«filterList«\!«rest», filter»»», filterList«\!«rest», filter»»», |«_, Nil»»»», foldList«->«list, acc, folder, match«list, |«::«first, rest», foldList«\!«rest», folder«acc, first», folder»», |«_, acc»»»», flatMapList«->«list, mapper, match«list, |«::«first, rest», do«let«flst, mapper«first»», concatLists«flst, flatMapList«\!«rest», mapper»»»», |«_, Nil»»»», listRange«->«from, to, ::«from, do«let«next, +«from, 1»», \«if«<=«next, to», listRange«next, to», Nil»»»»»»», instance«Mappable«[:, _map«->>«list, mapper, mapList«list, mapper»»»», Filterable«[:, _filter«->>«list, filter, filterList«list, filter»»»», Foldable«[:, _fold«->>«list, acc, folder, foldList«list, acc, folder»»»», Monad«[:, >>=«->>«list, fun, flatMapList«list, fun»»», _return«_toList»»»»