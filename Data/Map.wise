Data/Map«import«Data/Collection»¸ type«object«Map«k¸ v»¸ clear«Unit»¸ delete«->«k¸ Bool»»¸ forEach«->«->«v¸ k¸ Unit»¸ Unit»»¸ get«->«k¸ ?«v»»»¸ has«->«k¸ Bool»»¸ set«->«k¸ v¸ Unit»»¸ size«Number»¸ keys«[«k»»¸ values«[«v»»¸ entries«[«(«k¸ v»»»»¸ alias«<:«k¸ v»¸ Map«k¸ v»»»¸ define«:map«->>«[«(«k¸ v»»¸ <:«k¸ v»»¸ ->>«values¸ asm«`new Map(`¸ values¸ `)`»»»¸ <::>«<:«k¸ v»¸ asm«`new Map()`»»¸ :mapGet«->>«<:«k¸ v»¸ k¸ ?«v»»¸ ->>«map¸ "["¸ key¸ "]"¸ Map:«.get«map¸ key»»»»¸ :mapSet«->>«<:«k¸ v»¸ k¸ v¸ <:«k¸ v»»¸ ->>«map¸ "["¸ key¸ "] = "¸ value¸ do«Map:«.set«map¸ key¸ value»»¸ map»»»¸ :mapDelete«->>«<:«k¸ v»¸ k¸ <:«k¸ v»»¸ ->>«map¸ "["¸ key¸ "]"¸ do«Map:«.delete«map¸ key»»¸ map»»»¸ :mapHas«->>«<:«k¸ v»¸ k¸ Bool»¸ ->>«map¸ "["¸ key¸ "]"¸ Map:«.has«map¸ key»»»»¸ :mapSize«->>«<:«k¸ v»¸ Number»¸ ->>«map¸ Map:«.size«map»»»»¸ :mapKeys«->>«<:«k¸ v»¸ [«k»»¸ ->>«map¸ Map:«.keys«map»»»»¸ :mapValues«->>«<:«k¸ v»¸ [«v»»¸ ->>«map¸ Map:«.values«map»»»»¸ :mapEntries«->>«<:«k¸ v»¸ [«(«k¸ v»»»¸ ->>«map¸ Map:«.entries«map»»»»»»