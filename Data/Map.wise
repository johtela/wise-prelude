Data/Map«import«Math/Hash, Data/Collection», type«object«Map«k«Hashable», v», clear«Unit», delete«->«k, Bool»», forEach«->«->«v, k, Unit», Unit»», get«->«k, v»», has«->«k, Bool»», set«->«k, v, Unit»», size«Number», keys«[«k»», values«[«v»», entries«[«(«k, v»»»», alias«<:«k«Hashable», v», Map«k, v»»», define«:map«->>«[«(«k«Hashable», v»», <:«k, v»», ->>«values, asm«`new Map(`, values, `)`»»», <::>«<:«k«Hashable», v», asm«`new Map()`»», :mapGet«->>«<:«k«Hashable», v», k, v», ->>«map, "[", key, "]", :«Map, .get«map, key»»»», :mapSet«->>«<:«k«Hashable», v», k, v, <:«k, v»», ->>«map, "[", key, "] = ", value, do«:«Map, .set«map, key, value»», map»»», :mapDelete«->>«<:«k«Hashable», v», k, <:«k, v»», ->>«map, "[", key, "]", do«:«Map, .delete«map, key»», map»»», :mapHas«->>«<:«k«Hashable», v», k, Bool», ->>«map, "[", key, "]", :«Map, .has«map, key»»»», :mapSize«->>«<:«k«Hashable», v», Number», ->>«map, :«Map, .size«map»»»», :mapKeys«->>«<:«k«Hashable», v», [«k»», ->>«map, :«Map, .keys«map»»»», :mapValues«->>«<:«k«Hashable», v», [«v»», ->>«map, :«Map, .values«map»»»», :mapEntries«->>«<:«k«Hashable», v», [«(«k, v»»», ->>«map, :«Map, .entries«map»»»»»»