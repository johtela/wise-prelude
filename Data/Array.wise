Data/Array«import«Lang/Base, Lang/Comparison, Math/Arith«Arith, +, ++, _max», Data/Collection, Control/Monad», define«@array«->>«Num, [«a»», ->>«len, asm«`Array(`, len, `)`»»», @repeat«->>«a, Num, [«a»», ->>«val, cnt, asm«@array«cnt», `.fill(`, val, `)`»»», @concat«->>«[«[«a»», [«a»», ->>«arrs, asm«`Array.prototype.concat(...`, arrs, `)`»»», @+«->>«[«a», [«a», [«a»», ->>«arr1, arr2, asm«arr1, `.concat(`, arr2, `)`»»»», instance«Indexed«[, @length«->>«arr, asm«arr, `.length`»»», @«->>«arr, ind, asm«arr, `[`, ind, `]`»»»», MutableIndexed«[, @new«@array», @resize«->>«arr, size, asm«arr, `.length = `, size»»», @set«->>«arr, ind, val, asm«arr, `[`, ind, `] = `, val»»»», Mappable«[, _map«->>«arr, mapper, @map«arr, ->>«a, mapper«a»»»»»», Filterable«[, _filter«->>«arr, filter, do«let«res, @array«@length«arr»»», set«i, -1», @foreach«arr, ->>«a, _, if«filter«a», @set«res, ++«i», a»»»», @resize«res, +«^«i», 1»», res»»»», Foldable«[, _fold«->>«arr, acc, folder, @fold«arr, acc, ->>«a, i, folder«a, i»»»»»», Monad«[, >>=«->>«arr, fun, @concat«_map«arr, fun»»»», _return«->>«a, [«a»»»», MonadPlus«[, _m0«[», _m+«->>«a1, a2, @+«a1, a2»»»»»»