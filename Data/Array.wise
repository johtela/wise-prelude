Data/Array«import«Data/Collection», type«object«Array«a», length«Number, get, set», at«->«Number, a»», concat«->«...«[«Array«a»»», Array«a»»», copyWithin«->«Number, Number, Number, Array«a»»», every«->«->«a, Number, Bool», Bool»», fill«->«a, Number, Number, Array«a»»», filter«->«->«a, Number, Bool», Array«a»»», find«->«->«a, Number, Bool», ?«a»»», findIndex«->«->«a, Number, Bool», Number»», findLast«->«->«a, Number, Bool», ?«a»»», findLastIndex«->«->«a, Number, Bool», Number»», flatMap«->«->«a, Number, Array«a»», Array«a»»», forEach«->«->«a, Number, Unit», Unit»», includes«->«a, Bool»», indexOf«->«a, Number»», join«->«String, String»», lastIndexOf«->«a, Number»», map«->«->«a, Number, b», Array«b»»», pop«a», push«->«a, Number»», reduce«->«->«b, a, Number, b», b, b»», reduceRight«->«->«b, a, Number, b», b, b»», reverse«Array«a»», shift«a», slice«->«Number, Number, Array«a»»», some«->«->«a, Number, Bool», Bool»», sort«->«->«a, a, Number», Array«a»»», splice«->«Number, Number, ...«a», Array«a»»», toLocaleString«->«String, String»», toReversed«Array«a»», toSorted«->«->«a, a, Number», Array«a»»», toSpliced«->«Number, Number, ...«a», Array«a»»», toString«String», unshift«->«a, Number»», with«->«Number, a, Array«a»»»»», define«@array«->>«Number, [«a»», ->>«len, asm«`Array(`, len, `)`»»», @repeat«->>«a, Number, [«a»», ->>«val, cnt, asm«@array«cnt», `.fill(`, val, `)`»»», @concat«->>«[«[«a»», [«a»», ->>«arrs, asm«`Array.prototype.concat(...`, arrs, `)`»»», @+«->>«[«a», [«a», [«a»», ->>«arr1, arr2, asm«arr1, `.concat(`, arr2, `)`»»»», instance«Indexed«[, @length«->>«arr, asm«arr, `.length`»»», @«->>«arr, ind, asm«arr, `[`, ind, `]`»»»», MutableIndexed«[, @new«@array», @resize«->>«arr, size, asm«arr, `.length = `, size»»», @set«->>«arr, ind, val, asm«arr, `[`, ind, `] = `, val»»»», Mappable«[, _map«->>«arr, mapper, @map«arr, ->>«a, mapper«a»»»»»», Filterable«[, _filter«->>«arr, filter, do«let«res, @array«@length«arr»»», set«i, -1», @foreach«arr, ->>«a, _, if«filter«a», @set«res, ++«i», a»»»», @resize«res, +«^«i», 1»», res»»»», Foldable«[, _fold«->>«arr, acc, folder, @fold«arr, acc, ->>«a, i, folder«a, i»»»»»», Monad«[, >>=«->>«arr, fun, @concat«_map«arr, fun»»»», _return«->>«a, [«a»»»», MonadPlus«[, _m0«[», _m+«->>«a1, a2, @+«a1, a2»»»»»»