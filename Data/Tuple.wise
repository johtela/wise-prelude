Data/Tuple«import«Lang/Comparison», ---«"# 👩🏻‍🤝‍🧑🏻 Tuples

Basic operations and type class instances for tuples."», define«---«"## Helper Operations

`_withT?` macros call the specified `_op` macro using the items of the tuple as its parameters."», _withT1«->>«t, _op, do«let«(«a», t», _op«a»»»», _withT2«->>«t, _op, do«let«(«a, b», t», _op«a, b»»»», _withT3«->>«t, _op, do«let«(«a, b, c», t», _op«a, b, c»»»», _withT4«->>«t, _op, do«let«(«a, b, c, d», t», _op«a, b, c, d»»»», ---«"Apply operation using items of two tuples as its arguments."», _withT1T1«->>«t1, t2, _op, do«let«(«a1», t1», let«(«a2», t2», _op«a1, a2»»»», _withT2T2«->>«t1, t2, _op, do«let«(«a1, b1», t1», let«(«a2, b2», t2», _op«a1, b1, a2, b2»»»», _withT3T3«->>«t1, t2, _op, do«let«(«a1, b1, c1», t1», let«(«a2, b2, c2», t2», _op«a1, b1, c1, a2, b2, c2»»»», _withT4T4«->>«t1, t2, _op, do«let«(«a1, b1, c1, d1», t1», let«(«a2, b2, c2, d2», t2», _op«a1, b1, c1, d1, a2, b2, c2, d2»»»», ---«"## Mapping

Map items of a tuple into another tuple using the specified macro."», _mapT1«->>«t, _op, do«let«(«a1», t», («_op«a1»»»»», _mapT2«->>«t, _op, do«let«(«a1, a2», t», («_op«a1», _op«a2»»»»», _mapT3«->>«t, _op, do«let«(«a1, a2, a3», t», («_op«a1», _op«a2», _op«a3»»»»», _mapT4«->>«t, _op, do«let«(«a1, a2, a3, a4», t», («_op«a1», _op«a2», _op«a3», _op«a4»»»»», ---«"## Folding


Fold items of a tuple into a single value using the specified aggregator."», _foldT1«->>«t, _op, do«let«(«a1», t», _op«a1»»»», _foldT2«->>«t, _op, do«let«(«a1, a2», t», _op«a1, a2»»»», _foldT3«->>«t, _op, do«let«(«a1, a2, a3», t», _op«_op«a1, a2», a3»»»», _foldT4«->>«t, _op, do«let«(«a1, a2, a3, a4», t», _op«_op«_op«a1, a2», a3», a4»»»», ---«"## Map and Fold


Map and fold items of a tuple simulteneously."», _mapfoldT2«->>«t, _map, _fold, do«let«(«a1, a2», t», _fold«_map«a1», _map«a2»»»»», _mapfoldT3«->>«t, _map, _fold, do«let«(«a1, a2, a3», t», _fold«_fold«_map«a1», _map«a2»», _map«a3»»»»», _mapfoldT4«->>«t, _map, _fold, do«let«(«a1, a2, a3, a4», t», _fold«_fold«_fold«_map«a1», _map«a2»», _map«a3»», _map«a4»»»»», ---«"## Zipping


Zip items of two tuples into a third one using the specified binary macro."», _zipT1«->>«t1, t2, _op, do«let«(«a1», t1», let«(«b1», t2», («_op«a1, b1»»»»», _zipT2«->>«t1, t2, _op, do«let«(«a1, a2», t1», let«(«b1, b2», t2», («_op«a1, b1», _op«a2, b2»»»»», _zipT3«->>«t1, t2, _op, do«let«(«a1, a2, a3», t1», let«(«b1, b2, b3», t2», («_op«a1, b1», _op«a2, b2», _op«a3, b3»»»»», _zipT4«->>«t1, t2, _op, do«let«(«a1, a2, a3, a4», t1», let«(«b1, b2, b3, b4», t2», («_op«a1, b1», _op«a2, b2», _op«a3, b3», _op«a4, b4»»»»», ---«"## Zip and Fold


First zip the items of a macro and then fold them into a single value using the specified zipper and aggregator."», _zipfoldT2«->>«t1, t2, _zip, _fold, do«let«(«a1, a2», t1», let«(«b1, b2», t2», _fold«_zip«a1, b1», _zip«a2, b2»»»»», _zipfoldT3«->>«t1, t2, _zip, _fold, do«let«(«a1, a2, a3», t1», let«(«b1, b2, b3», t2», _fold«_fold«_zip«a1, b1», _zip«a2, b2»», _zip«a3, b3»»»»», _zipfoldT4«->>«t1, t2, _zip, _fold, do«let«(«a1, a2, a3, a4», t1», let«(«b1, b2, b3, b4», t2», _fold«_fold«_fold«_zip«a1, b1», _zip«a2, b2»», _zip«a3, b3»», _zip«a4, b4»»»»», ---«"## Tuple Functions


Functions to create tuples with arities 1 to 4."», tuple«->«a, («a»»», tuple2«->«a, b, («a, b»»», tuple3«->«a, b, c, («a, b, c»»», tuple4«->«a, b, c, d, («a, b, c, d»»», ---«"Return first and second item of a 2-tuple."», fst«->«(«a, _», a»», snd«->«(«_, b», b»», ---«"Swap items of a 2-tuple."», swap«->«(«a, b», («b, a»»»», instance«---«"## Instances of Show


Tuples are printed in parenthesis and items are separated by commas."», Show«(«a«Show»», _show«->>«t, _withT1«t, ->>«a, _concat«[«"(", _show«a», ")"»»»»»»», Show«(«a«Show», b«Show»», _show«->>«t, _withT2«t, ->>«a, b, _concat«[«"(", _show«a», ", ", _show«b», ")"»»»»»»», Show«(«a«Show», b«Show», c«Show»», _show«->>«t, _withT3«t, ->>«a, b, c, _concat«[«"(", _show«a», ", ", _show«b», ", ", _show«c», ")"»»»»»»», Show«(«a«Show», b«Show», c«Show», d«Show»», _show«->>«t, _withT4«t, ->>«a, b, c, d, _concat«[«"(", _show«a», ", ", _show«b», ", ", _show«c», ", ", _show«d», ")"»»»»»»», ---«"## Instances of Eq


Equality and inequality is defined in the obvious way by comparing the items."», Eq«(«a«Eq»», ==«->>«t1, t2, _withT1T1«t1, t2, ==»»», !=«->>«t1, t2, _withT1T1«t1, t2, !=»»»», Eq«(«a«Eq», b«Eq»», ==«->>«t1, t2, _withT2T2«t1, t2, ->>«a1, b1, a2, b2, &&«==«a1, a2», ==«b1, b2»»»»»», !=«->>«t1, t2, _withT2T2«t1, t2, ->>«a1, b1, a2, b2, ||«!=«a1, a2», !=«b1, b2»»»»»»», Eq«(«a«Eq», b«Eq», c«Eq»», ==«->>«t1, t2, _withT3T3«t1, t2, ->>«a1, b1, c1, a2, b2, c2, &&«==«a1, a2», &&«==«b1, b2», ==«c1, c2»»»»»»», !=«->>«t1, t2, _withT3T3«t1, t2, ->>«a1, b1, c1, a2, b2, c2, ||«!=«a1, a2», ||«!=«b1, b2», !=«c1, c2»»»»»»»», Eq«(«a«Eq», b«Eq», c«Eq», d«Eq»», ==«->>«t1, t2, _withT4T4«t1, t2, ->>«a1, b1, c1, d1, a2, b2, c2, d2, &&«==«a1, a2», &&«==«b1, b2», &&«==«c1, c2», ==«d1, d2»»»»»»»», !=«->>«t1, t2, _withT4T4«t1, t2, ->>«a1, b1, c1, d1, a2, b2, c2, d2, ||«!=«a1, a2», ||«!=«b1, b2», ||«!=«c1, c2», !=«d1, d2»»»»»»»»»»»