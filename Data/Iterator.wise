Data/Iterator«import«Lang/Base, Data/Collection, Data/Array», type«alias«IteratorResult«a», {«done«Bool», value«a»»», alias«Iterator«a», {«next«Lazy«IteratorResult«a»»»»», alias«Iterable«a», {«[Symbol.iterator]«Lazy«Iterator«a»»»»»», const«.iteratorDone«{«done«true», value«_undefined»»», empty_iter«Iterator«a», {«next«\«.iteratorDone»»»»», define«.iteratorResult«->>«a, IteratorResult«a»», ->>«value, {«done«false», value«value»»»», .iterator«->>«Iterable«a», Iterator«a»», ->>«iter, \!«.«iter, [Symbol.iterator]»»»», .iterate«->>«Iterable«a», ->>«a, Unit», Unit», ->>«coll, _action, do«let«iter, .iterator«coll»», set«res, \!«.«iter, next»»», while«.«^«res», done», do«_action«.«^«res», value»», :=«res, \!«.«iter, next»»»»»»»», .newIterator«->>«IteratorResult«a», Iterator«a»», ->>«iter, {«next«\«iter»»»»», .newIterable«->>«Iterator«a», Iterable«a»», ->>«iter, {«[Symbol.iterator]«\«iter»»»»», nthIterator«->«[«Iterable«a»», Number, Iterator«a»», ->«colls, i, if«<«i, @length«colls»», .iterator«@«colls, i»», empty_iter»»», concatIterables«->«[«Iterable«a»», Iterable«a»», ->«colls, .newIterable«do«set«i, 0», set«iter, nthIterator«colls, ^«i»»», set«res, \!«.«^«iter», next»»», .newIterator«do«let«lastres, ^«res»», if«!«.«lastres, done»», do«:=«res, \!«.«^«iter», next»»», lastres», do«:=«iter, nthIterator«colls, ++«i»»», :=«res, \!«.«^«iter», next»»»»»»»»»»», mapIterable«->«Iterable«a», ->«a, b», Iterable«b»», ->«coll, mapper, .newIterable«do«let«iter, .iterator«coll»», .newIterator«do«let«curr, \!«.«iter, next»»», {«done«.«curr, done»», value«if«.«curr, done», _undefined, mapper«.«curr, value»»»»»»»»»»», filterIterable«->«Iterable«a», ->«a, Bool», Iterable«a»», ->«coll, filter, .newIterable«do«let«iter, .iterator«coll»», .newIterator«do«set«curr, \!«.«iter, next»»», while«!«||«.«^«curr», done», filter«.«^«curr», value»»»», :=«curr, \!«.«iter, next»»»», {«done«.«^«curr», done»», value«.«^«curr», value»»»»»»»»»»»