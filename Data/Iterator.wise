Data/Iterator«import«Lang/Base, Data/Collection, Data/Array», type«alias«IteratorResult«a», {«done«Bool», value«a»»», alias«Iterator«a», {«next«Lazy«IteratorResult«a»»»»»», class«Iterable«i«a», .iterator«->>«i«a», Iterator«a»»»»», const«empty_iter«Iterator«a», {«next«\«{«done«true», value«_undefined»»»»»»», define«.obj_iter«->>«a, Iterator«b»», ->>«obj, asm«obj, `[Symbol.iterator]()`»»», .iterate«->>«i«a, Iterable», ->>«a, Unit», Unit», ->>«coll, _action, do«let«iter, .iterator«coll»», set«res, \!«.«iter, next»»», while«.«^«res», done», do«_action«.«^«res», value»», :=«res, \!«.«iter, next»»»»»»»», nth_iter«->«[«i«a, Iterable»», Number, Iterator«a»», ->«colls, i, if«<«i, @length«colls»», .iterator«@«colls, i»», empty_iter»»», concat_iters«->«[«i«a, Iterable»», Iterator«a»», ->«colls, do«set«i, 0», set«iter, nth_iter«colls, ^«i»»», set«res, .«^«iter», next«()»»», {«next«\«do«let«lastres, ^«res»», if«!«.«lastres, done»», do«:=«res, .«^«iter», next«()»»», lastres», do«:=«iter, nth_iter«colls, ++«i»»», :=«res, .«^«iter», next«()»»»»»»»»»»»»», instance«Iterable«[, .iterator«.obj_iter»»»»