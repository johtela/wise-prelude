Data/Iterator«import«Lang/Base, Data/Collection, Data/Array», type«alias«IteratorResult«a», {«done«Bool», value«a»»», alias«Iterator«a», {«next«Lazy«IteratorResult«a»»»»», data«Iterable«a», .iterable«{«[Symbol.iterator]«Lazy«Iterator«a»»»»»»», const«.iteratorDone«{«done«true», value«_undefined»»», emptyIterator«Iterator«a», {«next«\«.iteratorDone»»»»», define«.iteratorResult«->>«a, IteratorResult«a»», ->>«value, {«done«false», value«value»»»», .iterator«->>«Iterable«a», Iterator«a»», ->>«iter, do«let«.iterable«it», iter», \!«.«it, [Symbol.iterator]»»»»», .nextResult«->>«iter, \!«.«iter, next»»»», .iterate«->>«Iterable«a», ->>«a, Unit», Unit», ->>«coll, _action, do«let«iter, .iterator«coll»», set«curr, .nextResult«iter»», while«!«.«^«curr», done»», do«_action«.«^«curr», value»», :=«curr, .nextResult«iter»»»»»»», .newIterator«->>«IteratorResult«a», Iterator«a»», ->>«iter, {«next«\«iter»»»»», .newIterable«->>«Iterator«a», Iterable«a»», ->>«iter, .iterable«{«[Symbol.iterator]«\«iter»»»»»», .objIterable«->>«o«a», Iterable«a»», ->>«obj, asm«obj»»», @iterable«->>«[«a», Iterable«a»», ->>«arr, .objIterable«arr»»», @fromIterable«->>«Iterable«a», [«a»», ->>«iter, asm«`Array.from(`, iter, `)`»»», emptyIterable«.newIterable«emptyIterator»», singleIterable«->«a, Iterable«a»», ->«value, .newIterable«do«set«done, false», .newIterator«if«^«done», .iteratorDone, do«:=«done, true», .iteratorResult«value»»»»»»»», concatIterables«->«Iterable«Iterable«a»», Iterable«a»», ->«colls, .newIterable«do«let«iters, .iterator«colls»», set«curr, .nextResult«iters»», set«iter, if«.«^«curr», done», emptyIterator, .iterator«.«^«curr», value»»»», .newIterator«do«set«res, .nextResult«^«iter»»», while«&&«.«^«res», done», !«.«^«curr», done»»», do«:=«curr, .nextResult«iters»», if«!«.«^«curr», done»», _ignore«:=«res, .nextResult«:=«iter, .iterator«.«^«curr», value»»»»»»»»», ^«res»»»»»»», mapIterable«->«Iterable«a», ->«a, b», Iterable«b»», ->«coll, mapper, .newIterable«do«let«iter, .iterator«coll»», .newIterator«do«let«curr, .nextResult«iter»», {«done«.«curr, done»», value«if«.«curr, done», _undefined, mapper«.«curr, value»»»»»»»»»»», filterIterable«->«Iterable«a», ->«a, Bool», Iterable«a»», ->«coll, filter, .newIterable«do«let«iter, .iterator«coll»», .newIterator«do«set«curr, .nextResult«iter»», while«!«||«.«^«curr», done», filter«.«^«curr», value»»»», :=«curr, .nextResult«iter»»», {«done«.«^«curr», done»», value«.«^«curr», value»»»»»»»»», foldIterable«->«Iterable«a», b, ->«b, a, b», b», ->«coll, init, folder, do«set«acc, init», .iterate«coll, ->>«val, _ignore«:=«acc, folder«^«acc», val»»»»», ^«acc»»»»», instance«Mappable«Iterable, _map«->>«iter, mapper, mapIterable«iter, mapper»»»», Filterable«Iterable, _filter«->>«iter, filter, filterIterable«iter, filter»»»», Foldable«Iterable, _fold«->>«iter, init, folder, foldIterable«iter, init, folder»»»», Monad«Iterable, >>=«->>«iter, fun, concatIterables«mapIterable«iter, fun»»»», _return«->>«value, singleIterable«value»»»», MonadPlus«Iterable, _m0«emptyIterable», _m+«->>«a1, a2, concatIterables«@iterable«[«a1, a2»»»»»»»»