Data/Iterator«import«Lang/Base, Data/Collection, Data/Array», type«alias«IteratorResult«a», {«done«Bool», value«a»»», alias«Iterator«a», {«next«Lazy«IteratorResult«a»»»»», alias«Iterable«a», {«[Symbol.iterator]«Lazy«Iterator«a»»»»»», const«empty_iter«Iterator«a», {«next«\«{«done«true», value«_undefined»»»»»»», define«.iterator«->>«Iterable«a», Iterator«a»», ->>«iter, \!«.«iter, [Symbol.iterator]»»»», .iterate«->>«Iterable«a», ->>«a, Unit», Unit», ->>«coll, _action, do«let«iter, .iterator«coll»», set«res, \!«.«iter, next»»», while«.«^«res», done», do«_action«.«^«res», value»», :=«res, \!«.«iter, next»»»»»»»», nth_iter«->«[«Iterable«a»», Number, Iterator«a»», ->«colls, i, if«<«i, @length«colls»», .iterator«@«colls, i»», empty_iter»»», concat_iters«->«[«Iterable«a»», Iterator«a»», ->«colls, do«set«i, 0», set«iter, nth_iter«colls, ^«i»»», set«res, .«^«iter», next«()»»», {«next«\«do«let«lastres, ^«res»», if«!«.«lastres, done»», do«:=«res, .«^«iter», next«()»»», lastres», do«:=«iter, nth_iter«colls, ++«i»»», :=«res, .«^«iter», next«()»»»»»»»»»»»»»»