Data/Collection«import«Lang/Comparison¸ Math/Arith«Arith¸ +¸ ++»¸ Control/Monad»¸ class«Indexed«i«a»¸ @length«->>«"("¸ i«a»¸ ")"¸ Number»»¸ @«->>«i«a»¸ Number¸ a»»»¸ MutableIndexed«i«a¸ Indexed»¸ @new«->>«"["¸ Number¸ "]"¸ i«a»»»¸ @resize«->>«i«a»¸ "["¸ Number¸ "]"¸ Unit»»¸ @set«->>«i«a»¸ "["¸ Number¸ "] = "¸ a¸ Unit»»»¸ Mappable«m«a»¸ _map«->>«m«a»¸ " *with* "¸ ->«a¸ b»¸ m«b»»»»¸ Filterable«f«a»¸ _filter«->>«f«a»¸ " *where* "¸ ->«a¸ Bool»¸ f«a»»»»¸ Foldable«f«a»¸ _fold«->>«f«a»¸ " *from* "¸ b¸ " *with* "¸ ->«b¸ a¸ b»¸ b»»»»¸ define«---«"Operations on Indexed types"»¸ @is_empty«->>«coll¸ <«@length«coll»¸ 0»»»¸ @traverse«->>«i«a¸ Indexed»¸ ->>«a¸ Number¸ Unit»¸ Unit»¸ ->>«coll¸ " *with* "¸ .action¸ do«set«i¸ -1»¸ let«a¸ coll»¸ while«<«++«i»¸ @length«a»»¸ do«let«item¸ @«a¸ ^«i»»»¸ .action«item¸ ^«i»»»»»»»¸ @first«->>«i«a¸ Indexed»¸ ->>«a¸ Number¸ ?«b»»¸ ?«b»»¸ ->>«" *in* "¸ coll¸ " *where* "¸ .pred¸ do«set«i¸ -1»¸ let«a¸ coll»¸ set«curr¸ Null»¸ while«&&«<«++«i»¸ @length«a»»¸ ?null«^«curr»»»¸ do«let«item¸ @«a¸ ^«i»»»¸ _ignore«:=«curr¸ .pred«item¸ ^«i»»»»»»¸ ^«curr»»»»¸ @fold«->>«i«a¸ Indexed»¸ b¸ ->>«b¸ a¸ b»¸ b»¸ ->>«coll¸ " *from* "¸ initial¸ " *with* "¸ .folder¸ do«set«res¸ initial»¸ @traverse«coll¸ ->>«a¸ i¸ _ignore«:=«res¸ .folder«^«res»¸ a»»»»»¸ ^«res»»»»¸ ---«"Operations on MutableIndexed types"»¸ @map«->>«a«b¸ Indexed¸ MutableIndexed»¸ ->>«b¸ Number¸ c»¸ a«c»»¸ ->>«indexed¸ " *with* "¸ .mapper¸ do«let«coll¸ indexed»¸ let«res¸ @new«@length«coll»»»¸ @traverse«coll¸ ->>«a¸ i¸ @set«res¸ i¸ .mapper«a¸ i»»»»¸ res»»»¸ @map?«->>«a«b¸ Indexed¸ MutableIndexed»¸ ->>«b¸ ?«c»»¸ a«c»»¸ ->>«indexed¸ " *with* "¸ .mapper¸ do«let«coll¸ indexed»¸ let«res¸ @new«@length«coll»»»¸ set«i¸ -1»¸ @traverse«coll¸ ->>«a¸ j¸ ?with«.mapper«a»¸ ->>«b¸ @set«res¸ ++«i»¸ b»»»»»¸ @resize«res¸ +«^«i»¸ 1»»¸ res»»»»¸ define«---«"Operations for mappable and foldable types"»¸ _traverse«->>«coll¸ _iter¸ _fold«coll¸ ()¸ ->«_¸ a¸ _iter«a»»»»»»»