Test1«import«Base, Math, Array, Tuple, Html, Vector, Monad», type«:[«|«Nil, ::«a, :[«a»»»», ---«"This is <b>a bold </b>comment"», NumList«alias«:[«Num»»», Foo«alias«{«"foo"«Num», bar«Bool», .tail»»», Point«Pt«Num, Num»», Nullable«alias«?«->«Num, Num»»»», Sample«object«foo«Num», bar«Bool», fun«->«Sample, Bool»»»», Fiat«Fiat«a«Ord»»», Uno«alias«Fiat«Num»»»», define«sample«Sample, {«foo«2», bar«false», fun«->«this, .«this, bar»»», extra«"fas"»»», none«_show«(«1, 2, 3, 4»»», some«?«3»», testmdo«mdo«mlet«a, some», mreturn«+«a, 2»»»», testmon«>>=«some, ->«a, ?«2»»»», callMaybe«->«a, match«a, |«?«n», n», |«Null, 0»»»», foo«Foo«|«name«Str»»», {«foo«1», bar«false», name«"foo"»»», getName«->«rec, .«rec, name»»», append«::«{«foo«2»», ::«{«foo«1»», Nil»»», extfoo«|+«foo, doo«2»»», testFoo«[«...«[«"1"»», "foo", "bar", "as"»», testIter«_map?«testFoo, ->>«a, ?«1»»»», sum«->«list, match«list, |«::«a, rest», +«a, sum«rest»»», |«_, 0»»»», dad«->«b«Eq, Ord», b, b», ->«a, b, _max«a, b»»», asd«(«2, true»», did«==«1, 2»», dod««->«a, b, ==«a, b»», 1, 2»», testPat«->«a, [«b, c, ...«d»», a«b, c, d»»», main«do«letrec«a, ->«arg, *«b«arg», 2»»», letrec«b, ->«arg, -«a«arg», 1»»», try«a«1», catch«e, match«e, |«{«name«"RangeError"»», 0», |«_, throw«e»»»», finally«a«2»»»»», dodi«do«let«input, <input>«[«.type«"text"»»»», let«alert, ->«ev, «.«window, alert», $«.«input, value»»»»», <div>«[, [«input, <button>«[«.type«"button"», .click«alert»», "Yell!"»»»»», test_fold«|>\«[«1, 2, 3», 1, +»», fiu«fst«(«fst«(«1, 2»», 2»»», testvec«_veclen«(«1, 2»»»»»