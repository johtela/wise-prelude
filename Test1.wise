Test1«import«Lang/Comparison, Lang/RegExp, Data/List, Data/Dictionary, Data/Iterator, Html/Element, Math/Vector, Control/Monad», ---«"# Test Module

This module demonstrates some features of the **WISE** language."», type«---«"## Type Aliases

Type alias for lazy list of numbers. Alias is just a new name 
for existing type. It does not define new data types. $M(a)$
$$
sum_{i=1}^n i^3=({n(n+1)}/2)^2
$$"», alias«NumList, [:«Number»», alias«Foo«.tail», {«"foo"«Number», bar«Bool», .tail»», alias«Nullable, ?«->«Number, Number»»», ---«"## Algebraic Data Types

Algebraic data types or _ADT_s define new data structures:
either product types or union types."», data«Point, Pt«Number, Number»», data«Fiat«a«Ord»», Fiat«a»», alias«Uno, Fiat«Number»»», define«sample«{«foo«2», bar«false», fun«->«this, .«this, bar»»», extra«"fas"»»», simple«.«sample, fun«_»»», none«_show«(«1, 2, 3, 4»»», some«@iterable«[«3, 4, 5»»», testmdo«mdo«mlet«a, some», mreturn«+«a, 2»»»», testmon«>>=«some, ->«a, >>=«some, ->«b, ?>>«!=«a, b», _return«+«a, b»»»»»»»», testseq«seq«for«a, some», for«b, some», for«c, some», where«all«!=«a, b», !=«b, c», !=«a, c»»», yield«(«a, b, c»»»», callMaybe«->«a, match«a, |«?«n», n», |«Null, 0»»»», foo«Foo«|«name«String»»», {«foo«1», bar«false», name«"foo"»»», getName«->«rec, .«rec, name»»», append«::«{«foo«2»», \«::«{«foo«1»», \«Nil»»»»», testlist«foldList«append, 0, ->«a, {«foo«f»», +«a, f»»»», extfoo«|+«foo, doo«2»»», testFoo«[«...«[«"1"»», "foo", "bar", "as"»», spreadmatch«:«String, .concat«"foo", ...«testFoo»»»», sum«->«list, match«list, |«::«a, rest», +«a, sum«\!«rest»»»», |«_, 0»»»», asd«==«false, true»», dod««->«a, b, ==«a, b»», 1, 2»», daadaa«:dict«[«(«"foo", 2», («"bar", 3»»»», duuduu«:dictSet«daadaa, "foo", 5»», diidii«Dictionary«Number», {:}», main«do«letrec«a, ->«arg, *«b«arg», 2»»», letrec«b, ->«arg, -«a«arg», 1»»», try«a«1», catch«e, match«e, |«{«name«"RangeError"»», 0», |«_, throw«e»»»», finally«a«2»»»»», test_fold«@fold«[«1, 2, 3», 1, +»», fiu«fst«(«fst«(«1, 2»», 2»»», testvec«_veclen«(«1, 2»»»»»